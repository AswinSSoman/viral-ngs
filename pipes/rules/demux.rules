"""
    This is a basic framework for demultiplexing viral read data from
    the Broad Institute's walk-up sequencing platform.


    Basically the inputs are:
     - a tabular file describing sample name, library #, run #, barcode1 seq, and barcode2 seq
        for each sample. One such tab file per lane.
     - the flowcell ID and lane number
     - the Bustard directory (ask the person who did the run)
"""

__author__ = 'Kristian Andersen <andersen@broadinstitute.org>, Daniel Park <dpark@broadinstitute.org>'

from snakemake.utils import makedirs
import os, os.path, time, shutil

def iterate_lanes(runfile):
    if not os.path.isfile(runfile):
        return []
    for flowcellfile in read_samples_file(runfile):
        for lane in read_tab_file(flowcellfile):
            yield lane
    
def iterate_wells(runfile):
    for lane in iterate_lanes(runfile):
        for well in read_tab_file(lane['barcode_file']):
            yield (lane,well)

def get_one_lane_from_run(flowcell, lane, runfile):
    lanes = [x for x in iterate_lanes(runfile) if x['flowcell']==flowcell and x['lane']==lane]
    assert len(lanes)==1
    return lanes[0]

def get_one_lane_from_flowcell(flowcell, lane, flowcellfile):
    lanes = [x for x in read_tab_file(flowcellfile) if x['flowcell']==flowcell and x['lane']==lane]
    assert len(lanes)==1
    return lanes[0]

def get_all_samples(runfile):
    samples = set()
    for lane, well in iterate_wells(runfile):
        samples.add(well['sample'])
    return list(sorted(samples))

def get_all_lanes(runfile):
    return list(sorted(set(
        '.'.join((lane['flowcell'], lane['lane']))
        for lane in iterate_lanes(runfile))))

def get_run_id(well):    
    run_id = well['sample']
    if well.get('library_id_per_sample'):
        run_id += '.l' + well['library_id_per_sample']
    if well.get('run_id_per_library'):
        run_id += '.r' + well['run_id_per_library']
    return run_id

def get_bam_path(lane, well):
    return os.path.join(config['tmpDir'], config['subdirs']['demux'],
        'bams_per_lane', lane['flowcell'] + '.' + lane['lane'],
        get_run_id(well) + ".bam")
    
def get_all_runs(runfile):
    for lane, well in iterate_wells(runfile):
        yield get_run_id(well) +'.'+ lane['flowcell'] +'.'+ lane['lane']

rule all_demux_basecalls:
    input:  
            expand("{dir}/{flowlane}/{lib}.bam",
                dir = os.path.join(config['tmpDir'], config['subdirs']['demux'], 'bams_per_lane'),
                flowlane = get_all_lanes(config.get('seqruns_demux','')),
                lib = 'Unmatched')
    params: LSF="-N"

rule all_demux:
    input:
            expand("{dir}/{run}.bam",
                dir = os.path.join(config['dataDir'], config['subdirs']['source']),
                run=get_all_runs(config.get('seqruns_demux','')))
    params: LSF="-N"

rule make_picard_files:
    input:  "samples/flowcell-{flowcell}.txt"
    output: config['dataDir']+'/'+config['subdirs']['demux']+'/inputs/barcodeData.{flowcell}.{lane}.txt',
            config['dataDir']+'/'+config['subdirs']['demux']+'/inputs/library_params.{flowcell}.{lane}.txt'
    params: logid="{flowcell}.{lane}",
            bamDir=config['tmpDir']+'/'+config['subdirs']['demux']+'/bams_per_lane/{flowcell}.{lane}'
    run:
            makedirs(set(map(os.path.dirname, output)))
            barcode_file = get_one_lane_from_flowcell(wildcards.flowcell, wildcards.lane, input[0])['barcode_file']
            shell("{config[binDir]}/broad_utils.py make_barcodes_file {barcode_file} {output[0]}")
            shell("{config[binDir]}/broad_utils.py make_params_file {barcode_file} {params.bamDir} {output[1]}")

rule extract_barcodes:
    input:  config['dataDir']+'/'+config['subdirs']['demux']+'/inputs/barcodeData.{flowcell}.{lane}.txt'
    output: config['tmpDir']+'/'+config['subdirs']['demux']+'/barcodes/{flowcell}.{lane}',
            config['reportsDir']+'/barcodes/barcodes-metrics-{flowcell}.{lane}.txt'
    resources: mem=16
    params: LSF=config.get('LSF_queues', {}).get('long', '-q forest'),
            logid="{flowcell}.{lane}"
    run:
            makedirs(set(map(os.path.dirname, output)))
            shutil.rmtree(output[0], ignore_errors=True)
            makedirs(output[0])
            lane = get_one_lane_from_run(wildcards.flowcell, wildcards.lane, config['seqruns_demux'])
            dir = lane['bustard_dir']
            opts = ''
            for opt in ('minimum_base_quality', 'max_mismatches', 'min_mismatch_delta', 'max_no_calls', 'read_structure', 'minimum_quality'):
                if lane.get(opt):
                    opts += ' --%s=%s' % (opt, lane[opt])
            shell("{config[binDir]}/broad_utils.py extract_barcodes {dir} {wildcards.lane} {input[0]} {output[0]} --outMetrics={output[1]} {opts}")

rule illumina_basecalls:
    input:  config['dataDir']+'/'+config['subdirs']['demux']+'/inputs/library_params.{flowcell}.{lane}.txt',
            config['tmpDir']+'/'+config['subdirs']['demux']+'/barcodes/{flowcell}.{lane}'
    output: config['tmpDir']+'/'+config['subdirs']['demux']+'/bams_per_lane/{flowcell}.{lane}/Unmatched.bam'
    resources: mem=64
    params: LSF=config.get('LSF_queues', {}).get('bigmem', '-q flower'),
            logid="{flowcell}.{lane}",
            center=config['seq_center'],
            outdir=config['tmpDir']+'/'+config['subdirs']['demux']+'/bams_per_lane/{flowcell}.{lane}'
    run:
            shutil.rmtree(params.outdir, ignore_errors=True)
            makedirs(params.outdir)
            lane = get_one_lane_from_run(wildcards.flowcell, wildcards.lane, config['seqruns_demux'])
            dir = lane['bustard_dir']
            run_date = lane.get('seq_run_date')
            opts = ''
            for opt in ('read_structure',):
                if lane.get(opt):
                    opts += ' --%s=%s' % (opt, lane[opt])
            shell("{config[binDir]}/broad_utils.py illumina_basecalls {dir} {input[1]} {wildcards.flowcell} {wildcards.lane} {input[0]} --include_non_pf_reads=false --run_start_date={run_date} --sequencing_center={params.center} {opts}")

def demux_move_bams_inputs(wildcards):
    lane = get_one_lane_from_run(wildcards.flowcell, wildcards.lane, config.get('seqruns_demux',''))
    for well in read_tab_file(lane['barcode_file']):
        if well['sample']==wildcards.sample and well['library_id_per_sample']==wildcards.library and well['run_id_per_library']==wildcards.run:
            return get_bam_path(lane, well)
    return "unreachable-{}-{}-{}-{}".format(wildcards.sample, wildcards.library, wildcards.flowcell, wildcards.lane)
rule move_bams_demux:
    input:  demux_move_bams_inputs
    output: config['dataDir']+'/'+config['subdirs']['source']+'/{sample}.l{library}.r{run}.{flowcell}.{lane}.bam'
    params: logid="{sample}.l{library}.r{run}.{flowcell}.{lane}"
    run:
            makedirs(os.path.join(config['dataDir'], config['subdirs']['source']))
            shutil.move(input[0], output[0])

rule bams_from_fastq:
    input:  os.path.join(config['dataDir'],config['subdirs']['source'],'{sample}_L001_R1_001.fastq.gz'),
            os.path.join(config['dataDir'],config['subdirs']['source'],'{sample}_L001_R2_001.fastq.gz')
    output: os.path.join(config['dataDir'],config['subdirs']['source'],'{sample}.bam')
    params: LSF=config.get('LSF_queues', {}).get('short', '-W 4:00'),
            logid="{sample}",
            center=config["seq_center"]
    run:
            makedirs(os.path.join(config['dataDir'], config['subdirs']['source']))
            shell("{config[binDir]}/read_utils.py fastq_to_bam {input} {output} --sampleName {wildcards.sample} --picardOptions PLATFORM=illumina SEQUENCING_CENTER={params.center} LIBRARY_NAME={wildcards.sample} SORT_ORDER=queryname")

ruleorder: move_bams_demux > bams_from_fastq

