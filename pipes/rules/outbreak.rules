"""
Analyses of an outbreak: determining who infected whom with which strains.

Abbreviations/terms:
   asm: assembly
   asm kmers: kmers present in the final assembly of a sample
   raw/cleaned/taxfilt kmers: kmers present in raw/cleaned/taxfilt reads
   sample day: number of days since outbreak start to collection date for a sample
"""

__author__ = 'Ilya Shlyakhter <ilya@broadinstitute.org>'


from snakemake.utils import makedirs
import os, os.path, time, shutil, tempfile

wildcard_constraints:
    # File naming convention for KMC kmer databases, based on kmc command-line flags
    # used to create the database:
    # .kN. : kmer size N
    # .ciN. : exclude kmers with fewer than N occurrences
    # .cxN. : exclude kmers with more than N occurrences
    # .csN. : cap kmer counters at N
    K="\d\d",
    CI="\d+",
    CX="\d+",
    CS="\d+",

def kmc(kmc_db_prefix):
    """Return the KMC kmer database filesnames given the database prefix"""
    return [kmc_db_prefix+ext for ext in ('.kmc_pre', '.kmc_suf')]

tmp_outbreak_dir = config["tmp_dir"] +'/'+config["subdirs"]["outbreak"]

rule compute_asm_kmers:
    '''For each sample, compute the kmers in its final assembly.
    '''
    input:  
        final_asm = config["data_dir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.fasta'
    output:
        kmc(tmp_outbreak_dir+'/{sample}.asm.k{K}')
    resources:
        mem     = 2,
    threads: 1,
    params: 
        logid       = "{sample}",
    run:
        shell("{config[bin_dir]}/kmers.py build_kmer_db {input.final_asm} {output[0]} -k {wildcards.K} --counterCap 1 --memLimitGb {resources.mem} --threads {threads}")


rule compute_raw_kmers:
    '''For each sample, compute the kmers in the raw reads.
    '''
    input:  
        raw_bam = config["data_dir"] +'/'+config["subdirs"]["per_sample"]+'/{sample}.raw.bam'
    output:
        kmc(tmp_outbreak_dir+'/{sample}.raw.k{K}.ci{CI}.cs{CS}')
    resources:
        mem     = 15,
    threads: 64,
    params: 
        logid       = "{sample}",
    run:
        shell("{config[bin_dir]}/kmers.py build_kmer_db {input.raw_bam} {output[0]} -k {wildcards.K} --minOccs {wildcards.CI} --counterCap {wildcards.CS} --memLimitGb {resources.mem} --threads {threads}")


rule all_asm_kmers:
    '''Gather k-mers in each sample assembly'''
    input:
        # create final assemblies for all samples
        expand(tmp_outbreak_dir+"/{sample}.asm.k{K}.kmc_pre",
               sample=read_samples_file(config["samples_assembly"]), K=config["outbreak"]["kmer_size"])
    run:
        print('input=', input)
        print(config["samples_assembly"])
        print(list(read_samples_file(config["samples_assembly"])))

rule all_raw_bams:
    '''Get the raw reads bam for each sample'''
    input:
        # create final assemblies for all samples
        expand("{data_dir}/{subdir}/{sample}.raw.bam",
            data_dir=config["data_dir"], subdir=config["subdirs"]["per_sample"],
               sample=read_samples_file(config["samples_assembly"]))
    run:
        print('input=', input)
        print(config["samples_assembly"])
        print(list(read_samples_file(config["samples_assembly"])))
        
rule all_raw_kmers:
    '''Gather k-mers in each sample assembly'''
    input:
        # create final assemblies for all samples
        expand(tmp_outbreak_dir+"/{sample}.raw.k{K}.ci{CI}.cs{CS}.kmc_pre",
               sample=read_samples_file(config["samples_assembly"]), K=config["outbreak"]["kmer_size"], CI=2, CS=255)
    run:
        print('input=', input)
        print(config["samples_assembly"])
        print(list(read_samples_file(config["samples_assembly"])))

rule set_asm_kmer_counts_to_sample_day:
    '''For each sample, create a kmer database of its asm kmers with kmer count set to the sample day.'''
    input: 
        kmc(tmp_outbreak_dir+'/{sample}.asm.k{K}'),
        day = tmp_outbreak_dir+'/{sample}.days_since_outbreak_start.txt'
    output:
        kmc(tmp_outbreak_dir+'/{sample}.asm.day.k{K}')
    params:
        logid = "{sample}",
    run:
        shell("{config[bin_dir]}/kmers.py kmers_set_counts {input[0]} `cat {input.day}` {output[0]}")

