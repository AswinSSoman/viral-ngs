"""
Analyses of an outbreak: determining who infected whom with which strains.

Abbreviations/terms:
   asm: assembly
   asm kmers: kmers present in the final assembly of a sample
   raw/cleaned/taxfilt kmers: kmers present in raw/cleaned/taxfilt reads
   sample day: number of days since outbreak start to collection date for a sample
"""

__author__ = 'Ilya Shlyakhter <ilya@broadinstitute.org>'


from snakemake.utils import makedirs
import os, os.path, time, shutil, tempfile

wildcard_constraints:
    # File naming convention for KMC kmer databases, based on kmc command-line flags
    # used to create the database:
    # .kN. : kmer size N
    # .ciN. : exclude kmers with fewer than N occurrences
    # .cxN. : exclude kmers with more than N occurrences
    # .csN. : cap kmer counters at N
    K="\d\d",
    CI="\d+",
    CX="\d+",
    CS="\d+",
    ADJ="raw|cleaned|taxfilt|asm"

def kmc(kmc_db_prefix):
    """Return the KMC kmer database filesnames given the database prefix"""
    return [kmc_db_prefix+ext for ext in ('.kmc_pre', '.kmc_suf')]

tmp_outbreak_dir = config["tmp_dir"] +'/'+config["subdirs"]["outbreak"]

rule compute_kmers:
    '''Compute kmers for a sample'''
    input:
        lambda wildcards: config["data_dir"] +'/'+config["subdirs"]["assembly"]+'/'+wildcards.sample+'.fasta' \
            if wildcards.ADJ=='asm' else \
            config["data_dir"] +'/'+config["subdirs"]["per_sample"]+'/'+wildcards.sample+'.'+wildcards.ADJ+'.bam'
    output:
        kmc(tmp_outbreak_dir+'/{sample}.{ADJ}.k{K}.ci{CI}.cx{CX}.cs{CS}')
    threads: lambda wildcards: 1 if wildcards.ADJ=='asm' else 64
    resources: mem=12
    run:
        shell("{config[bin_dir]}/kmers.py build_kmer_db {input} {output[0]} -k {wildcards.K} --minOccs {wildcards.CI} --maxOccs {wildcards.CX} --counterCap {wildcards.CS} --memLimitGb {resources.mem} --threads {threads}")

rule set_kmer_counts_to_sample_day:
    '''For each sample, create a kmer database of its asm kmers with kmer count set to the sample day.'''
    input: 
        kmc(tmp_outbreak_dir+'/{sample}.{ADJ}.k{K}.ci{CI}.cx{CX}.cs{CS}'),
        day = tmp_outbreak_dir+'/{sample}.day.txt'
    output:
        kmc(tmp_outbreak_dir+'/{sample}.{ADJ}.k{K}.ci{CI}.cx{CX}.cs{CS}.day'),
    params:
        logid = "{sample}",
    run:
        shell("{config[bin_dir]}/kmers.py kmers_set_counts {input[0]} `cat {input.day}` {output[0]} --threads {threads}")


rule kmers_earliest_day:
    '''For each k-mer get the earliest it appeared'''
    input: 
        lambda wildcards: \
            expand(tmp_outbreak_dir+"/{sample}.{ADJ}.k{K}.ci{CI}.cx{CX}.cs{CS}.day.kmc_{presuf}",
                   sample=read_samples_file(config["samples_outbreak"]), presuf=('pre', 'suf'), K=wildcards.K,
                   CI=wildcards.CI, CX=wildcards.CX, CS=wildcards.CS, ADJ=wildcards.ADJ)
            
    output:
         kmc(tmp_outbreak_dir+"/all_samples.{ADJ}.k{K}.ci{CI}.cx{CX}.cs{CS}.min_day"),
         opfile = tmp_outbreak_dir+"/all_samples.{ADJ}.k{K}.ci{CI}.cx{CX}.cs{CS}.min_day.op"
    run:
        with open(output.opfile, 'w') as out:
            out.write('INPUT:\n')
            sample_ids = []
            for in_f in input:
                if in_f.endswith('.kmc_pre'):
                    sample = os.path.basename(in_f).split('.')[0]
                    sample_id = sample.replace('-', '_')
                    sample_ids.append(sample_id)
                    out.write('{} = {} -ci1 -cx999999\n'.format(sample_id, os.path.splitext(in_f)[0]))
            out.write('OUTPUT:\n')
            out.write('{} = {}\n'.format(os.path.splitext(output[1])[0], ' + min '.join(sample_ids)))
            out.write('OUTPUT_PARAMS:\n')
            out.write('-ci1 -cx999999 -cs999999\n')
        shell("kmc_tools -v -t{threads} complex {output.opfile}")

rule all_asm_kmer_days:
    '''Gather k-mers in each sample assembly'''
    input:
        expand(kmc(tmp_outbreak_dir+'/{sample}.{ADJ}.k{K}.ci{CI}.cx{CX}.cs{CS}.day'),
               sample=read_samples_file(config["samples_outbreak"]), K=config["outbreak"]["kmer_size"], ADJ='asm',
               CI=1, CX=999999, CS=255)
        
rule all_raw_kmer_days:
    '''Gather k-mers in each sample assembly'''
    input:
        # create final assemblies for all samples
        expand(kmc(tmp_outbreak_dir+'/{sample}.{ADJ}.k{K}.ci{CI}.cx{CX}.cs{CS}.day'),
               sample=read_samples_file(config["samples_outbreak"]), K=config["outbreak"]["kmer_size"], ADJ='raw',
               CI=2, CX=999999, CS=255)
        
