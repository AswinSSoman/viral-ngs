"""
Analyses of an outbreak: determining who infected whom with which strains.
"""

__author__ = 'Ilya Shlyakhter <ilya@broadinstitute.org>'


from snakemake.utils import makedirs
import os, os.path, time, shutil, tempfile

wildcard_constraints:
    # File naming convention for KMC kmer databases, based on kmc command-line flags
    # used to create the database:
    # .kN. : kmer size N
    # .ciN. : exclude kmers with fewer than N occurrences
    # .cxN. : exclude kmers with more than N occurrences
    # .csN. : cap kmer counters at N
    K="\d\d",
    CI="\d+",
    CX="\d+",
    CS="\d+",

rule compute_asm_kmers:
    '''For each sample, compute the kmers in its final assembly.
    '''
    input:  
        final_asm = config["data_dir"] +'/'+config["subdirs"]["assembly"]+'/{sample}.fasta'
    output:
        config["tmp_dir"] +'/'+config["subdirs"]["outbreak"]+'/{sample}.asm.k{K}.kmc_pre',
        config["tmp_dir"] +'/'+config["subdirs"]["outbreak"]+'/{sample}.asm.k{K}.kmc_suf',
    resources:
        mem     = 7,
    threads: 1,
    params: 
        logid       = "{sample}",
    run:
        shell("{config[bin_dir]}/kmers.py build_kmer_db {input.final_asm} {output[0]} -k {wildcards.K} --counterCap 1 --memLimitGb {resources.mem} --threads {threads}")


rule all_asm_kmers:
    '''Gather k-mers in each sample assembly'''
    input:
        # create final assemblies for all samples
        expand("{tmp_dir}/{subdir}/{sample}.asm.k{K}.kmc_pre",
            tmp_dir=config["tmp_dir"], subdir=config["subdirs"]["outbreak"],
               sample=read_samples_file(config["samples_assembly"]), K=config["outbreak"]["kmer_size"])
    run:
        print('input=', input)
        print(config["samples_assembly"])
        print(list(read_samples_file(config["samples_assembly"])))

rule all_raw_bams:
    '''Get the raw reads bam for each sample'''
    input:
        # create final assemblies for all samples
        expand("{data_dir}/{subdir}/{sample}.raw.bam",
            data_dir=config["data_dir"], subdir=config["subdirs"]["per_sample"],
               sample=read_samples_file(config["samples_assembly"]))
    run:
        print('input=', input)
        print(config["samples_assembly"])
        print(list(read_samples_file(config["samples_assembly"])))
        
